// <auto-generated />
using System;
using System.Collections.Generic;
using Domain.Entities.Orders;
using Domain.Enums.ClassTypes;
using Domain.Enums.DocumentTypes;
using Domain.Enums.Genders;
using Infrastructure.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240322122338_AddInitProject")]
    partial class AddInitProject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Airlains.Airlain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Airlains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42072f36-e9a0-4184-a189-ace3e0036efa"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "SZ",
                            Name = "Somon Air"
                        },
                        new
                        {
                            Id = new Guid("66ee2396-d593-4ad9-b6a2-435d82ce5b38"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "UA",
                            Name = "United Airlines"
                        },
                        new
                        {
                            Id = new Guid("ea608b7c-5982-4267-a276-69d257829d07"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "U6",
                            Name = "Уральские авиалинии"
                        },
                        new
                        {
                            Id = new Guid("799c5589-e720-4009-a4f8-88d507700d8f"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "EK",
                            Name = "Emirates"
                        },
                        new
                        {
                            Id = new Guid("98967639-2634-4924-b1be-4de33b90c02f"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "HH",
                            Name = "Qanot Sharq"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Airports.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee1d374f-f06d-4753-baf3-8ed52881714e"),
                            CityId = new Guid("ee1d374f-f06d-4753-baf3-8ed52881714e"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "LBD",
                            Name = "Международный аэропорт Худжанд"
                        },
                        new
                        {
                            Id = new Guid("09f7eea6-ca7c-4bd9-842c-0916d0df8042"),
                            CityId = new Guid("09f7eea6-ca7c-4bd9-842c-0916d0df8042"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "DYU",
                            Name = "Международный аэропорт  Душанбе"
                        },
                        new
                        {
                            Id = new Guid("0f41b6ff-bdda-42c7-883e-012d82c37791"),
                            CityId = new Guid("0f41b6ff-bdda-42c7-883e-012d82c37791"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "DME",
                            Name = "Домодедово"
                        },
                        new
                        {
                            Id = new Guid("1c83a698-c96c-4bbd-9b05-1b1f2abcce82"),
                            CityId = new Guid("1c83a698-c96c-4bbd-9b05-1b1f2abcce82"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "LED",
                            Name = "Аэропорт Пулково"
                        },
                        new
                        {
                            Id = new Guid("ff84a563-0807-453e-a1c2-2c87401726f8"),
                            CityId = new Guid("ff84a563-0807-453e-a1c2-2c87401726f8"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "LAX",
                            Name = "Лос-Анджелес"
                        },
                        new
                        {
                            Id = new Guid("8857dc1f-a51c-489e-9586-19db5372c711"),
                            CityId = new Guid("8857dc1f-a51c-489e-9586-19db5372c711"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "NYC",
                            Name = "Нью-Йорк"
                        },
                        new
                        {
                            Id = new Guid("bac8b8e0-b639-4a3b-a063-5f874315e49d"),
                            CityId = new Guid("bac8b8e0-b639-4a3b-a063-5f874315e49d"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "AUH",
                            Name = "Абу-Даби"
                        },
                        new
                        {
                            Id = new Guid("42072f36-e9a0-4184-a189-ace3e0036efa"),
                            CityId = new Guid("42072f36-e9a0-4184-a189-ace3e0036efa"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "DXB",
                            Name = "Дубай"
                        },
                        new
                        {
                            Id = new Guid("f737ab45-3dee-4024-8e40-639d3680fc14"),
                            CityId = new Guid("f737ab45-3dee-4024-8e40-639d3680fc14"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "TAS",
                            Name = "Ташкент"
                        },
                        new
                        {
                            Id = new Guid("a7f55e3b-4dd1-4903-80d9-40ce44007734"),
                            CityId = new Guid("a7f55e3b-4dd1-4903-80d9-40ce44007734"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "AZN",
                            Name = "Андижан"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Currencies.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("IsoNum")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d731c30e-6944-4813-aafc-9c2f789da5bb"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsoCode = "USD",
                            IsoNum = "840",
                            Name = "Американский доллар",
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("4764fd15-1017-43a8-8fef-8f3312f34956"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsoCode = "EUR",
                            IsoNum = "978",
                            Name = "Евро",
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("53fd9edd-e622-491c-909e-3748b4668764"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsoCode = "RUB",
                            IsoNum = "643",
                            Name = "Российский рубль",
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("de762a85-2f06-456b-bfb1-75ca0206e8c7"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsoCode = "TJS",
                            IsoNum = "972",
                            Name = "Таджикский сомони",
                            Rate = 0m
                        },
                        new
                        {
                            Id = new Guid("041e859a-4a7b-4883-b7ee-104d22b2542b"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsoCode = "UZS",
                            IsoNum = "860",
                            Name = "Узбекский сум",
                            Rate = 0m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BaggagePrice")
                        .HasColumnType("numeric(20,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CurrencyRate")
                        .HasColumnType("numeric(20,2)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OfferId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20,2)");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Orders.OrderFlight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Aircraft")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("AirlineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArrivalAirportId")
                        .HasColumnType("uuid");

                    b.Property<ICollection<FlightBaggage>>("BaggageJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<ClassTypeEnum>("ClassType")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepatureAirportId")
                        .HasColumnType("uuid");

                    b.Property<double>("DistanceInKm")
                        .HasColumnType("double precision");

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepatureAirportId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("RoteId");

                    b.ToTable("OrderFlights");
                });

            modelBuilder.Entity("Domain.Entities.Orders.OrderPassenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CitizenshipId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<PassengerDocumentTypeEnum>("DocumentType")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateOnly?>("ExpiredAt")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<GenderEnum>("Gender")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateOnly?>("IssueAt")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderPassengers");
                });

            modelBuilder.Entity("Domain.Entities.Orders.OrderRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArrivalAirportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ArrivalAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("CanChange")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRefund")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartureAirportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DepartureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderRoutes");
                });

            modelBuilder.Entity("Domain.Entities.Orders.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("105abf8d-2f8b-4bc9-9f89-640acd6cce1c"),
                            Code = "Created",
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Создан"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Regions.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee1d374f-f06d-4753-baf3-8ed52881714e"),
                            CountryId = new Guid("ae32ad92-286d-41e6-8ea7-436c69c91025"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "LBD",
                            Name = "Худжанд"
                        },
                        new
                        {
                            Id = new Guid("09f7eea6-ca7c-4bd9-842c-0916d0df8042"),
                            CountryId = new Guid("ae32ad92-286d-41e6-8ea7-436c69c91025"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "DYU",
                            Name = "Душанбе"
                        },
                        new
                        {
                            Id = new Guid("0f41b6ff-bdda-42c7-883e-012d82c37791"),
                            CountryId = new Guid("0541a1ab-fae2-4ffc-a361-1b5c84ca56bf"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "MOW",
                            Name = "Москва"
                        },
                        new
                        {
                            Id = new Guid("1c83a698-c96c-4bbd-9b05-1b1f2abcce82"),
                            CountryId = new Guid("0541a1ab-fae2-4ffc-a361-1b5c84ca56bf"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "LED",
                            Name = "Санкт-Петербург"
                        },
                        new
                        {
                            Id = new Guid("ff84a563-0807-453e-a1c2-2c87401726f8"),
                            CountryId = new Guid("4083740c-d960-4950-83cf-65e4f89e4875"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "LAX",
                            Name = "Лос-Анджелес"
                        },
                        new
                        {
                            Id = new Guid("8857dc1f-a51c-489e-9586-19db5372c711"),
                            CountryId = new Guid("4083740c-d960-4950-83cf-65e4f89e4875"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "NYC",
                            Name = "Нью-Йорк"
                        },
                        new
                        {
                            Id = new Guid("bac8b8e0-b639-4a3b-a063-5f874315e49d"),
                            CountryId = new Guid("635bf746-fb46-42e7-b98e-d11c8596c798"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "AUH",
                            Name = "Абу-Даби"
                        },
                        new
                        {
                            Id = new Guid("42072f36-e9a0-4184-a189-ace3e0036efa"),
                            CountryId = new Guid("635bf746-fb46-42e7-b98e-d11c8596c798"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "DXB",
                            Name = "Дубай"
                        },
                        new
                        {
                            Id = new Guid("f737ab45-3dee-4024-8e40-639d3680fc14"),
                            CountryId = new Guid("675fa316-9670-435b-800f-fd4e076e76ae"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "TAS",
                            Name = "Ташкент"
                        },
                        new
                        {
                            Id = new Guid("a7f55e3b-4dd1-4903-80d9-40ce44007734"),
                            CountryId = new Guid("675fa316-9670-435b-800f-fd4e076e76ae"),
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IATACode = "AZN",
                            Name = "Андижан"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Regions.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae32ad92-286d-41e6-8ea7-436c69c91025"),
                            Code = "TJ",
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Таджикистан"
                        },
                        new
                        {
                            Id = new Guid("0541a1ab-fae2-4ffc-a361-1b5c84ca56bf"),
                            Code = "RU",
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Россия"
                        },
                        new
                        {
                            Id = new Guid("4083740c-d960-4950-83cf-65e4f89e4875"),
                            Code = "US",
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "США"
                        },
                        new
                        {
                            Id = new Guid("635bf746-fb46-42e7-b98e-d11c8596c798"),
                            Code = "AE",
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "ОАЭ"
                        },
                        new
                        {
                            Id = new Guid("675fa316-9670-435b-800f-fd4e076e76ae"),
                            Code = "UZ",
                            CreatedAt = new DateTime(2024, 3, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Узбекистан"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CitizenshipId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CityResidenceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("CityResidenceId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Airports.Airport", b =>
                {
                    b.HasOne("Domain.Entities.Regions.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("Domain.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Orders.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Domain.Entities.Orders.OrderFlight", b =>
                {
                    b.HasOne("Domain.Entities.Airlains.Airlain", "Airlain")
                        .WithMany()
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Airports.Airport", "ArrivalAirport")
                        .WithMany()
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Airports.Airport", "DepatureAirport")
                        .WithMany()
                        .HasForeignKey("DepatureAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Orders.OrderRoute", "OrderRoute")
                        .WithMany("OrderFlights")
                        .HasForeignKey("RoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airlain");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepatureAirport");

                    b.Navigation("OrderRoute");
                });

            modelBuilder.Entity("Domain.Entities.Orders.OrderPassenger", b =>
                {
                    b.HasOne("Domain.Entities.Regions.Country", "Citizenship")
                        .WithMany()
                        .HasForeignKey("CitizenshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderPassengers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizenship");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.Orders.OrderRoute", b =>
                {
                    b.HasOne("Domain.Entities.Airports.Airport", "ArrivalAirport")
                        .WithMany()
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Airports.Airport", "DepartureAirport")
                        .WithMany()
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderRoutes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.Regions.City", b =>
                {
                    b.HasOne("Domain.Entities.Regions.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Domain.Entities.Regions.Country", "Citizenship")
                        .WithMany()
                        .HasForeignKey("CitizenshipId");

                    b.HasOne("Domain.Entities.Regions.City", "CityResidence")
                        .WithMany()
                        .HasForeignKey("CityResidenceId");

                    b.HasOne("Domain.Entities.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Citizenship");

                    b.Navigation("CityResidence");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderPassengers");

                    b.Navigation("OrderRoutes");
                });

            modelBuilder.Entity("Domain.Entities.Orders.OrderRoute", b =>
                {
                    b.Navigation("OrderFlights");
                });
#pragma warning restore 612, 618
        }
    }
}
